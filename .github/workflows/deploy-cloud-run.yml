name: Deploy ncat to Google Cloud Run (with Cloudflare R2)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-ncat
  cancel-in-progress: false

env:
  # --- Configure these for your GCP environment ---
  PROJECT_ID: lumeora
  REGION: europe-west4
  SERVICE: ncat
  AR_REPO: ncat

  # --- Non-secret app configuration (Cloudflare R2 S3-compatible) ---
  S3_ENDPOINT_URL: https://047a93543c3c69fc1cb880a69f9938a1.r2.cloudflarestorage.com
  S3_BUCKET_NAME: lumeora
  S3_REGION: auto

  # --- Performance/runtime tuning ---
  CPU: "2"
  MEMORY: 4Gi
  CONCURRENCY: "1"
  MIN_INSTANCES: "0"
  MAX_INSTANCES: "5"
  REQUEST_TIMEOUT: "3600"      # seconds (Cloud Run max is 3600)
  LOCAL_STORAGE_PATH: /tmp
  MAX_QUEUE_LENGTH: "10"
  GUNICORN_WORKERS: "4"
  GUNICORN_TIMEOUT: "3600"

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # Create this secret with the JSON of a service account key
          # that has the required IAM roles (see notes below)
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 451.0.0"
          project_id: ${{ env.PROJECT_ID }}

      - name: Enable required APIs (idempotent)
        run: |
          gcloud services enable \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            cloudbuild.googleapis.com || true

      - name: Create Artifact Registry repository (idempotent)
        run: |
          gcloud artifacts repositories create "${AR_REPO}" \
            --repository-format=docker \
            --location="${REGION}" || true

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Compute image URI
        run: |
          echo "IMAGE_URI=${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${SERVICE}" >> "$GITHUB_ENV"

      - name: Build and push container image
        env:
          DOCKER_BUILDKIT: "1"
        run: |
          docker build \
            -t "${IMAGE_URI}:${GITHUB_SHA}" \
            -t "${IMAGE_URI}:latest" \
            .
          docker push "${IMAGE_URI}:${GITHUB_SHA}"
          docker push "${IMAGE_URI}:latest"

      - name: Upsert Secret Manager secrets from GitHub Secrets
        env:
          API_KEY: ${{ secrets.API_KEY }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        run: |
          set -euo pipefail

          upsert_secret () {
            local NAME="$1"
            local VALUE="$2"
            if [[ -z "${VALUE}" ]]; then
              echo "ERROR: Secret $NAME is empty or not set. Please add it in GitHub Secrets." >&2
              exit 1
            fi
            gcloud secrets create "$NAME" --replication-policy=automatic || true
            # Add a new version; keep history in Secret Manager
            printf '%s' "$VALUE" | gcloud secrets versions add "$NAME" --data-file=-
          }

          upsert_secret "api-key"         "$API_KEY"
          upsert_secret "s3-access-key"   "$S3_ACCESS_KEY"
          upsert_secret "s3-secret-key"   "$S3_SECRET_KEY"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE_URI}:${GITHUB_SHA}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --cpu="${CPU}" \
            --memory="${MEMORY}" \
            --concurrency="${CONCURRENCY}" \
            --min-instances="${MIN_INSTANCES}" \
            --max-instances="${MAX_INSTANCES}" \
            --timeout="${REQUEST_TIMEOUT}" \
            --set-env-vars S3_ENDPOINT_URL="${S3_ENDPOINT_URL}",S3_BUCKET_NAME="${S3_BUCKET_NAME}",S3_REGION="${S3_REGION}",LOCAL_STORAGE_PATH="${LOCAL_STORAGE_PATH}",MAX_QUEUE_LENGTH="${MAX_QUEUE_LENGTH}",GUNICORN_WORKERS="${GUNICORN_WORKERS}",GUNICORN_TIMEOUT="${GUNICORN_TIMEOUT}" \
            --set-secrets=API_KEY=api-key:latest,S3_ACCESS_KEY=s3-access-key:latest,S3_SECRET_KEY=s3-secret-key:latest

      - name: Print service URL
        run: |
          URL="$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.url)')"
          echo "Service URL: ${URL}"
          echo "SERVICE_URL=${URL}" >> "$GITHUB_ENV"

      # Optional: quick smoke test (will not fail the deploy if it times out)
      - name: Smoke test /v1/toolkit/test
        continue-on-error: true
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          if command -v curl >/dev/null 2>&1; then
            curl -sS -m 15 -H "x-api-key: ${API_KEY}" "${SERVICE_URL}/v1/toolkit/test" || true
          fi
